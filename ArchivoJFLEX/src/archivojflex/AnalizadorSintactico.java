
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 12 20:06:57 COT 2015
//----------------------------------------------------

package archivojflex;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.TreeMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 12 20:06:57 COT 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\005" +
    "\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\006\003\005\005\006\001\002\000\010\002" +
    "\015\003\005\005\006\001\002\000\010\002\ufffe\003\ufffe" +
    "\005\ufffe\001\002\000\006\003\011\006\010\001\002\000" +
    "\010\002\uffff\003\uffff\005\uffff\001\002\000\006\003\012" +
    "\004\013\001\002\000\010\002\ufffd\003\ufffd\005\ufffd\001" +
    "\002\000\010\002\ufffc\003\ufffc\005\ufffc\001\002\000\010" +
    "\002\ufffb\003\ufffb\005\ufffb\001\002\000\010\002\001\003" +
    "\001\005\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\006\002\003\003\006\001\001\000\004\003" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("EXISTE UN ERRROR ");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" EN LA LINEA ==> "+(s.left+1));
                if (s.right >= 0)
                    m.append(", COLUMNA ==> "+(s.right+1));
            }
        }
        m.append(" || "+message);
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
    public final static TreeMap<Integer, String> numeros = new TreeMap<Integer, String>();
    public static String result = "";
    public static String fail = "";
    public static String failSint = "";

    public static String Traducir(Integer numero) {
        String num = "";
        result = "";
        num = numeros.get(numero);
        System.out.println(" ==> " + num);
        result = num;
        return num;
    }
    public static void main(String[] args){  
        numeros.put(1, "first");
        numeros.put(2, "second");
        numeros.put(3, "third");
        numeros.put(4, "fourth");
        numeros.put(5, "fiveth");
        numeros.put(6, "sixth");
        numeros.put(7, "seventh");
        numeros.put(8, "eighth");
        numeros.put(9, "nineth");
        numeros.put(10, "tenth"); 
        try {
            AnalizadorLexico al = new AnalizadorLexico(new FileReader(args[0]));
            failSint = al.failLexico;
            AnalizadorSintactico asin = new AnalizadorSintactico(al);
            Object result = asin.parse().value;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    } 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= TRADUCIR NUM PC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 System.out.print(n);AnalizadorSintactico.Traducir(n); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= TRADUCIR NUM error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FAlTA EL PUNTO Y COMA <<;>>", 2 ); 
                AnalizadorSintactico.fail = " FAlTA EL PUNTO Y COMA <<;>> "; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= TRADUCIR error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FAlTA EL NUMERO A TRADUCIR <<ingrese un numero entero>>", 4 );
                AnalizadorSintactico.fail = " FAlTA EL NUMERO A TRADUCIR <<numero entero>> "; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FALTA LA PALABRA RESERVADA <<traducir>>", 3 ); 
                AnalizadorSintactico.fail = " FALTA LA PALABRA RESERVADA <<traducir>> ";
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cadena ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cadena",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cadena EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cadena ::= cadena instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cadena",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

